/**
 * 2的幂次方
 * 每一个正整数都能用指数形式表示，例如：
 * 137=2^7+2^3+2^0
 * 用a(b)来表示a^b，那么137可表示为2(7)+2(3)+2(0)
 * 而7、3又可以继续拆解，则
 * 137 = 2(2(2)+2+2(0))+2(2+2(0))+2(0)
 * 给定一个正整数n，给出其指数形式的表达式，只包含2、0以及必要的+、括号
 * 
 * INPUT:
 * n //n<=20000
 * OUTPUT:
 * 指数表达形式
 * 
 * e.g.
 * INPUT:
 * 1315
 * OUTPUT:
 * 2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)
 * 
 * 1024+256+32+2+1
 * 10100100011
 * TIPS:
 * 对于0、1、2都可以直接输出
 * 否则就要先输出左括号，在输出中间部分，最后是右括号
 * 
 * 对于一个正整数，要表示为2的幂次，
 * 3 = 0011 = 2 + 2^0
 * 7 = 0111 = 2^2 + 2 + 2^0
 * 9 = 1001 = 2^3 + 2^0
 * 要知道对应的幂次就要先将每个数转为二进制
 * 
 * 
 **/ 
#include <iostream>
#include <cmath>
#include <algorithm>
using namespace std;

void present(int n){
    //求n的2次幂表达式
    if (n == 0)
        cout << "0";
    else if (n == 1)
        return;
    else if (n == 2)    
        cout << "2";
    else
    {
        while (n)
        {
            int i=0;
            for (i = 0; i < 15 && pow(2, i) <= n; ++i); //求n的最高次项幂，因为20000的最高项次不超过14
            int j=i-1;
            if (j == 1)
                cout << "2";
            else
                cout << "2(";
            present(j); //幂次超出2的则要继续拆解
            if (j != 1)
                cout << ")"; //完善右括号
            n -= pow(2,j); //减去已展开的部分
            if (n != 0)
                cout << "+";
        }
    }
}

int main(){
    int n;
    while (cin >> n)
    {
        present(n);
    }
    return 0;
}
