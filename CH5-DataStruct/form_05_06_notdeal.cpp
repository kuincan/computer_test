/**
 * 简单计算器
 * 读入一个只包含'+'、'-'、'*'、'/'的非负整数计算表达式
 * 计算该表达式的值
 * 
 * 在运算符栈中放置一个特殊运算符$，优先级最低
 * 在表达式末尾添加一个特殊运算符#，优先级最低
 * 
 * 用两个栈分别存储 运算数和运算符
 * 若扫描到运算数则直接入栈
 * 若扫描到运算符，则与栈顶元素进行比较，
 * 若优先级大于栈顶元素，则将运算符压栈
 * 否则弹出两个运算数进行运算
 * 
 * 2+5*10
 * num 2 5 扫描到10，op栈顶为*，最高优先级的运算符，则弹出5 10，5*10=50压栈，op弹出*
 * op + ,扫描到*，*压栈 -> op + *
 * 
 * 2*10+5-2/3
 * num 2 10 
 * op  * 扫描到+，优先级小于*，则2*10=2=压栈弹出*，+压栈
 * 
 * num 20 5
 * op  +  扫描到-，与+同级则弹出20 5，20+5=25压栈，-压栈
 * 
 * num 25 2
 * op  - 扫描到 /，优先级大于-，/压栈
 * 
 * num 25 2 3
 * op  -  /
 * 
 * 
 * INPUT:
 * 若干测试用例，每个测试用例一行
 * 每个测试用例不超过100个字符，整数和运算符之间用一个空格分隔
 * 当一行中只有0时输入结束
 * 
 * 不考虑非法表达式
 * 
 * OUTPUT:
 * 输出表达式的值，精确到小数点后2位
 * 
 **/
#include <iostream>
#include <stack>
#include <string>
using namespace std;

int main(){
    stack<int> num;
    stack<char> op;
    char ch;
    string expr;
    while (getline(cin, expr))
    {
        if (expr.size() == 1 && expr[0]-'0' == 0)
            return 0;
        //完成初始化
        expr.insert(expr.size(), 1, '#');
        op.push('$');
        
        
    }
    
    return 0;
}